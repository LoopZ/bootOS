     1                                          ;
     2                                          ; bootOS, an operating system in 512 bytes
     3                                          ;
     4                                          ; by Oscar Toledo G.
     5                                          ; http://nanochess.org/
     6                                          ;
     7                                          ; Creation date: Jul/21/2019. 6pm 10pm
     8                                          ; Revision date: Jul/22/2019. Optimization, corrections and comments.
     9                                          ; Revision date: Jul/31/2019. Added a service table and allows
    10                                          ;                             filenames/sources/targets from any segment.
    11                                          ;                             'del' command now shows errors.
    12                                          ;
    13                                  
    14                                          cpu 8086
    15                                  
    16                                          ;
    17                                          ; What is bootOS:
    18                                          ; 
    19                                          ;   bootOS is a monolithic operating system that fits in
    20                                          ;   one boot sector. It's able to load, execute, and save
    21                                          ;   programs. Also keeps a filesystem. It can work with
    22                                          ;   any floppy disk size starting at 180K.
    23                                          ; 
    24                                          ;   It relocates itself at 0000:7a00 and requires further
    25                                          ;   768 bytes of memory starting at 0000:7700.
    26                                          ; 
    27                                          ;   This operating system runs programs as boot sectors
    28                                          ;   at 0000:7c00. 
    29                                          ; 
    30                                          ;   It provides the following services:
    31                                          ;      int 0x20   Exit to operating system.
    32                                          ;      int 0x21   Input key and show in screen.
    33                                          ;                 Entry: none
    34                                          ;                 Output: AL = ASCII key pressed.
    35                                          ;                 Affects: AH/BX/BP.
    36                                          ;      int 0x22   Output character to screen.
    37                                          ;                 Entry: AL = Character.
    38                                          ;                 Output: none.
    39                                          ;                 Affects: AH/BX/BP.
    40                                          ;      int 0x23   Load file.
    41                                          ;                 Entry: DS:BX = Filename terminated with zero.
    42                                          ;                        ES:DI = Point to source data (512 bytes)
    43                                          ;                 Output: Carry flag = 0 = Found, 1 = Not found.
    44                                          ;                 Affects: All registers (including ES).
    45                                          ;      int 0x24   Save file.
    46                                          ;                 Entry: DS:BX = Filename terminated with zero.
    47                                          ;                        ES:DI = Point to data target (512 bytes)
    48                                          ;                 Output: Carry flag = 0 = Successful. 1 = Error.
    49                                          ;                 Affects: All registers (including ES).
    50                                          ;      int 0x25   Delete file.
    51                                          ;                 Entry: DS:BX = Filename terminated with zero.
    52                                          ;                 Affects: All registers (including ES).
    53                                          ;
    54                                          ; 
    55                                          ; Filesystem organization:
    56                                          ;
    57                                          ;   bootOS uses tracks from 0 to 32, side 0, sector 1.
    58                                          ;
    59                                          ;   The directory is contained in track 0, side 0, sector 2.
    60                                          ;
    61                                          ;   Each entry in the directory is 16 bytes wide, and
    62                                          ;   contains the ASCII name of the file finished with a
    63                                          ;   zero byte. A sector has a capacity of 512 bytes, it
    64                                          ;   means only 32 files can be kept on a floppy disk.
    65                                          ;
    66                                          ;   Deleting a file is a matter of zeroing a whole entry.
    67                                          ;
    68                                          ;   Each file is one sector long. Its location in the
    69                                          ;   disk is derived from its position in the directory.
    70                                          ;
    71                                          ;   The 1st file is located at track 1, side 0, sector 1.
    72                                          ;   The 2nd file is located at track 2, side 0, sector 1.
    73                                          ;   The 32nd file is located at track 32, side 0, sector 1.
    74                                          ;
    75                                          ;
    76                                          ; Starting bootOS:
    77                                          ;
    78                                          ;   Just make sure to write it at the boot sector of a
    79                                          ;   floppy disk. It can work with any floppy disk size
    80                                          ;   (360K, 720K, 1.2MB and 1.44MB) and it will waste the
    81                                          ;   disk space as only uses the first two sectors of the
    82                                          ;   disk and then the first sector of each following
    83                                          ;   track.
    84                                          ;
    85                                          ;   For emulation make sure to deposit it at the start
    86                                          ;   of a .img file of 360K, 720K or 1440K. (at least
    87                                          ;   VirtualBox detects the type of disk by the length
    88                                          ;   of the image file)
    89                                          ;
    90                                          ;   For Mac OS X and Linux you can create a 360K image
    91                                          ;   in this way:
    92                                          ; 
    93                                          ;     dd if=/dev/zero of=oszero.img count=719 bs=512
    94                                          ;     cat os.img oszero.img >osbase.img
    95                                          ; 
    96                                          ;   Replace 719 with 1439 for 720K, or 2879 for 1.44M.
    97                                          ; 
    98                                          ;   Tested with VirtualBox for Mac OS X running Windows XP
    99                                          ;   running it, it also works with qemu:
   100                                          ; 
   101                                          ;     qemu-system-x86_64 -fda os.img
   102                                          ; 
   103                                          ; Running bootOS:
   104                                          ;
   105                                          ;   The first time you should enter the 'format' command,
   106                                          ;   so it initializes the directory. It also copies itself
   107                                          ;   again to the boot sector, this is useful to init new
   108                                          ;   disks.
   109                                          ;
   110                                          ; bootOS commands:
   111                                          ;
   112                                          ;   ver           Shows the version (none at the moment)
   113                                          ;   dir           Shows the directory's content.
   114                                          ;   del filename  Deletes the "filename" file.
   115                                          ;   format        As explained before.
   116                                          ;   enter         Allows to enter up to 512 hexadecimal
   117                                          ;                 bytes to create another file.
   118                                          ;
   119                                          ;                 Notice the line size is 128 characters so
   120                                          ;                 you must break the input into chunks of
   121                                          ;                 4, 8 or 16 bytes.
   122                                          ;
   123                                          ;                 It also allows to copy the last executed
   124                                          ;                 program just press Enter when the 'h' prompt
   125                                          ;                 appears and type the new name.
   126                                          ;
   127                                          ; For example: (Character + is Enter key)
   128                                          ;   
   129                                          ;   $enter+
   130                                          ;   hbb 17 7c 8a 07 84 c0 74 0c 53 b4 0e bb 0f 00 cd+
   131                                          ;   h10 5b 43 eb ee cd 20 48 65 6c 6c 6f 2c 20 77 6f+
   132                                          ;   h72 6c 64 0d 0a 00+
   133                                          ;   h+
   134                                          ;   *hello+
   135                                          ;   $dir+
   136                                          ;   hello
   137                                          ;   $hello+
   138                                          ;   Hello, world
   139                                          ;   $
   140                                          ;
   141                                          ; bootOS programs: (Oh yes! we have software support)
   142                                          ;
   143                                          ;   fbird         https://github.com/nanochess/fbird
   144                                          ;   Pillman       https://github.com/nanochess/pillman
   145                                          ;   invaders      https://github.com/nanochess/invaders
   146                                          ;   bootBASIC     https://github.com/nanochess/bootBASIC
   147                                          ;
   148                                          ; You can copy the machine code directly using the 'enter'
   149                                          ; command, or you can create a file with signature bytes
   150                                          ; with the same command and later copy the binary into the
   151                                          ; .img file using the signature bytes as a clue to locate
   152                                          ; the right position in the image file.
   153                                          ;
   154                                          ; Or you can find a pre-designed disk image along this Git
   155                                          ; with the name osall.img
   156                                          ;
   157                                  
   158                                  stack:  equ 0x7700      ; Stack pointer (grows to lower addresses)
   159                                  line:   equ 0x7780      ; Buffer for line input
   160                                  sector: equ 0x7800      ; Sector data for directory
   161                                  osbase: equ 0x7a00      ; bootOS location
   162                                  boot:   equ 0x7c00      ; Boot sector location  
   163                                  
   164                                  entry_size:     equ 16  ; Directory entry size
   165                                  sector_size:    equ 512 ; Sector size
   166                                  max_entries:    equ sector_size/entry_size
   167                                  
   168                                          ;
   169                                          ; Cold start of bootOS
   170                                          ;
   171                                          ; Notice it is loaded at 0x7c00 (boot) and needs to
   172                                          ; relocate itself to 0x7a00 (osbase). The instructions
   173                                          ; between 'start' and 'ver_command' shouldn't depend
   174                                          ; on the assembly location (osbase) because these
   175                                          ; are running at boot location (boot).
   176                                          ;
   177                                          org osbase
   178                                  start:
   179 00000000 31C0                            xor ax,ax       ; Set all segments to zero
   180 00000002 8ED8                            mov ds,ax
   181 00000004 8EC0                            mov es,ax
   182 00000006 8ED0                            mov ss,ax
   183 00000008 BC0077                          mov sp,stack    ; Set stack to guarantee data safety
   184                                  
   185 0000000B FC                              cld             ; Clear D flag.
   186 0000000C BE007C                          mov si,boot     ; Copy bootOS boot sector...
   187 0000000F BF007A                          mov di,osbase   ; ...into osbase
   188 00000012 B90002                          mov cx,sector_size
   189 00000015 F3A4                            rep movsb
   190                                  
   191 00000017 BE[E801]                        mov si,int_0x20 ; SI now points to int_0x20 
   192 0000001A BF8000                          mov di,0x0020*4 ; Address of service for int 0x20
   193 0000001D B106                            mov cl,6
   194                                  .load_vec:
   195 0000001F A5                              movsw           ; Copy IP address
   196 00000020 AB                              stosw           ; Copy CS address
   197 00000021 E2FC                            loop .load_vec
   198                                  
   199                                          ;
   200                                          ; 'ver' command
   201                                          ;
   202                                  ver_command:
   203 00000023 BE[B801]                        mov si,intro
   204                                  print_then_restart:
   205 00000026 E84201                          call output_string
   206 00000029 CD20                            int int_restart ; Restart bootOS
   207                                  
   208                                          ;
   209                                          ; Warm start of bootOS
   210                                          ;
   211                                  restart:
   212 0000002B FC                              cld             ; Clear D flag.
   213 0000002C 0E                              push cs         ; Reinit all segment registers
   214 0000002D 0E                              push cs
   215 0000002E 0E                              push cs
   216 0000002F 1F                              pop ds
   217 00000030 07                              pop es
   218 00000031 17                              pop ss
   219 00000032 BC0077                          mov sp,stack    ; Restart stack
   220                                  
   221 00000035 B024                            mov al,'$'      ; Command prompt
   222 00000037 E80201                          call input_line ; Input line
   223                                  
   224 0000003A 803C00                          cmp byte [si],0x00  ; Empty line?
   225 0000003D 74EC                            je restart          ; Yes, get another line
   226                                  
   227 0000003F BF[C401]                        mov di,commands ; Point to commands list
   228                                  
   229                                          ; Notice that filenames starting with same characters
   230                                          ; won't be recognized as such (so file dirab cannot be
   231                                          ; executed).
   232                                  os11:
   233 00000042 8A05                            mov al,[di]     ; Read length of command in chars
   234 00000044 47                              inc di
   235 00000045 25FF00                          and ax,0x00ff   ; Is it zero?
   236 00000048 7410                            je os12         ; Yes, jump
   237 0000004A 91                              xchg ax,cx
   238 0000004B 56                              push si         ; Save current position
   239 0000004C F3A6                            rep cmpsb       ; Compare statement
   240 0000004E 7504                            jne os14        ; Equal? No, jump
   241 00000050 FF15                            call word [di]  ; Call command process
   242 00000052 EBD7                            jmp restart     ; Go to expect another command
   243                                  
   244 00000054 01CF                    os14:   add di,cx       ; Advance the list pointer
   245 00000056 AF                              scasw           ; Avoid the address
   246 00000057 5E                              pop si
   247 00000058 EBE8                            jmp os11        ; Compare another statement
   248                                  
   249 0000005A 89F3                    os12:   mov bx,si       ; Input pointer
   250 0000005C BF007C                          mov di,boot     ; Location to read data
   251 0000005F CD23                            int int_load_file       ; Load file
   252 00000061 7202                            jc os7          ; Jump if error
   253 00000063 FFE3                            jmp bx
   254                                  
   255                                          ;
   256                                          ; File not found error
   257                                          ;
   258                                  os7:
   259 00000065 BE[BF01]                        mov si,error_message
   260 00000068 EBBC                            jmp print_then_restart
   261                                  
   262                                          ;
   263                                          ; >> COMMAND <<
   264                                          ; del filename
   265                                          ;
   266                                  del_command:
   267                                  os22:
   268 0000006A 89F3                            mov bx,si       ; Copy SI (buffer pointer) to BX
   269 0000006C AC                              lodsb
   270 0000006D 3C20                            cmp al,0x20     ; Avoid spaces
   271 0000006F 74F9                            je os22
   272 00000071 CD25                            int int_delete_file
   273 00000073 72F0                            jc os7
   274 00000075 C3                              ret
   275                                  
   276                                          ;
   277                                          ; 'dir' command
   278                                          ;
   279                                  dir_command:
   280 00000076 E8A000                          call read_dir           ; Read the directory
   281 00000079 89DF                            mov di,bx
   282                                  os18:
   283 0000007B 803D00                          cmp byte [di],0         ; Empty entry?
   284 0000007E 7405                            je os17                 ; Yes, jump
   285 00000080 89FE                            mov si,di               ; Point to data
   286 00000082 E8E600                          call output_string      ; Show name
   287 00000085 E86E00                  os17:   call next_entry
   288 00000088 75F1                            jne os18                ; No, jump
   289 0000008A C3                              ret                     ; Return
   290                                  
   291                                          ;
   292                                          ; Get filename length and prepare for directory lookup
   293                                          ; Entry:
   294                                          ;   si = pointer to string
   295                                          ; Output:
   296                                          ;   si = unaffected
   297                                          ;   di = pointer to start of directory
   298                                          ;   cx = length of filename including zero terminator
   299                                          ;
   300                                  filename_length:
   301 0000008B 56                              push si
   302 0000008C 31C9                            xor cx,cx       ; cx = 0
   303                                  .loop:
   304 0000008E AC                              lodsb           ; Read character.
   305 0000008F 41                              inc cx          ; Count character.
   306 00000090 3C00                            cmp al,0        ; Is it zero (end character)?
   307 00000092 75FA                            jne .loop       ; No, jump.
   308                                  
   309 00000094 5E                              pop si
   310 00000095 BF0078                          mov di,sector   ; Point to start of directory.
   311 00000098 C3                              ret
   312                                          
   313                                          ;
   314                                          ; >> SERVICE <<
   315                                          ; Load file
   316                                          ;
   317                                          ; Entry:
   318                                          ;   ds:bx = Pointer to filename ended with zero byte.
   319                                          ;   es:di = Destination.
   320                                          ; Output:
   321                                          ;   Carry flag = Set = not found, clear = successful.
   322                                          ;
   323                                  load_file:
   324 00000099 57                              push di         ; Save destination
   325 0000009A 06                              push es
   326 0000009B E84000                          call find_file  ; Find the file (sanitizes ES)
   327 0000009E B402                            mov ah,0x02     ; Read sector
   328                                  shared_file:
   329 000000A0 07                              pop es
   330 000000A1 5B                              pop bx          ; Restore destination on BX
   331 000000A2 7203                            jc ret_cf       ; Jump if error
   332 000000A4 E88400                          call disk       ; Do operation with disk
   333                                                          ; Carry guaranteed to be clear.
   334                                  ret_cf:
   335 000000A7 89E5                            mov bp,sp
   336 000000A9 D05604                          rcl byte [bp+4],1       ; Insert Carry flag in Flags (automatic usage of SS)
   337 000000AC CF                              iret
   338                                  
   339                                          ;
   340                                          ; >> SERVICE <<
   341                                          ; Save file
   342                                          ;
   343                                          ; Entry:
   344                                          ;   ds:bx = Pointer to filename ended with zero byte.
   345                                          ;   es:di = Source.
   346                                          ; Output:
   347                                          ;   Carry flag = Set = error, clear = good.
   348                                          ;
   349                                  save_file:
   350 000000AD 57                              push di                 ; Save origin
   351 000000AE 06                              push es
   352 000000AF 53                              push bx                 ; Save filename pointer
   353 000000B0 CD25                            int int_delete_file     ; Delete previous file (sanitizes ES)
   354 000000B2 5B                              pop bx                  ; Restore filename pointer
   355 000000B3 E8D5FF                          call filename_length    ; Prepare for lookup
   356                                  
   357 000000B6 26803D00                .find:  es cmp byte [di],0      ; Found empty directory entry?
   358 000000BA 7407                            je .empty               ; Yes, jump and fill it.
   359 000000BC E83700                          call next_entry
   360 000000BF 75F5                            jne .find
   361 000000C1 EBDD                            jmp shared_file
   362                                  
   363 000000C3 57                      .empty: push di
   364 000000C4 F3A4                            rep movsb               ; Copy full name into directory
   365 000000C6 E85A00                          call write_dir          ; Save directory
   366 000000C9 5F                              pop di
   367 000000CA E83200                          call get_location       ; Get location of file
   368 000000CD B403                            mov ah,0x03             ; Write sector
   369 000000CF EBCF                            jmp shared_file
   370                                  
   371                                          ;
   372                                          ; >> SERVICE <<
   373                                          ; Delete file
   374                                          ;
   375                                          ; Entry:
   376                                          ;   ds:bx = Pointer to filename ended with zero byte.
   377                                          ; Output:
   378                                          ;   Carry flag = Set = not found, clear = deleted.
   379                                          ;
   380                                  delete_file:
   381 000000D1 E80A00                          call find_file          ; Find file (sanitizes ES)
   382 000000D4 72D1                            jc ret_cf               ; If carry set then not found, jump.
   383 000000D6 B91000                          mov cx,entry_size
   384 000000D9 E84300                          call write_zero_dir     ; Fill whole entry with zero. Write directory.
   385 000000DC EBC9                            jmp ret_cf
   386                                  
   387                                          ;
   388                                          ; Find file
   389                                          ;
   390                                          ; Entry:
   391                                          ;   ds:bx = Pointer to filename ended with zero byte.
   392                                          ; Output:
   393                                          ;   es:di = Pointer to directory entry
   394                                          ;   Carry flag = Clear if found, set if not found.
   395                                  find_file:
   396 000000DE 53                              push bx
   397 000000DF E83700                          call read_dir   ; Read directory (sanitizes ES)
   398 000000E2 5E                              pop si
   399 000000E3 E8A5FF                          call filename_length    ; Get filename length and setup DI
   400                                  os6:
   401 000000E6 56                              push si
   402 000000E7 57                              push di
   403 000000E8 51                              push cx
   404 000000E9 F3A6                            repe cmpsb      ; Compare name with entry
   405 000000EB 59                              pop cx
   406 000000EC 5F                              pop di
   407 000000ED 5E                              pop si
   408 000000EE 740F                            je get_location ; Jump if equal.
   409 000000F0 E80300                          call next_entry
   410 000000F3 75F1                            jne os6         ; No, jump
   411 000000F5 C3                              ret             ; Return
   412                                  
   413                                  next_entry:
   414 000000F6 83C710                          add di,byte entry_size          ; Go to next entry.
   415 000000F9 81FF007A                        cmp di,sector+sector_size       ; Complete directory?
   416 000000FD F9                              stc                             ; Error, not found.
   417 000000FE C3                              ret
   418                                  
   419                                          ;
   420                                          ; Get location of file on disk
   421                                          ;
   422                                          ; Entry:
   423                                          ;   DI = Pointer to entry in directory.
   424                                          ;
   425                                          ; Output:
   426                                          ;   CH = Track number in disk.
   427                                          ;   CL = Sector (always 0x01).
   428                                          ;
   429                                          ; The position of a file inside the disk depends on its
   430                                          ; position in the directory. The first entry goes to
   431                                          ; track 1, the second entry to track 2 and so on.
   432                                          ;
   433                                  get_location:
   434 000000FF 8D851088                        lea ax,[di-(sector-entry_size)] ; Get entry pointer into directory
   435                                                          ; Plus one entry (files start on track 1)
   436 00000103 B104                            mov cl,4        ; 2^(8-4) = entry_size
   437 00000105 D3E0                            shl ax,cl       ; Shift left and clear Carry flag
   438 00000107 40                              inc ax          ; AL = Sector 1
   439 00000108 91                              xchg ax,cx      ; CH = Track, CL = Sector
   440 00000109 C3                              ret
   441                                  
   442                                          ;
   443                                          ; >> COMMAND <<
   444                                          ; format
   445                                          ;
   446                                  format_command:
   447 0000010A BF0078                          mov di,sector   ; Fill whole sector to zero
   448 0000010D B90002                          mov cx,sector_size
   449 00000110 E80C00                          call write_zero_dir
   450 00000113 BB007A                          mov bx,osbase   ; Copy bootOS onto first sector
   451 00000116 49                              dec cx
   452 00000117 EB12                            jmp short disk
   453                                  
   454                                          ;
   455                                          ; Read the directory from disk
   456                                          ;
   457                                  read_dir:
   458 00000119 0E                              push cs         ; bootOS code segment...
   459 0000011A 07                              pop es          ; ...to sanitize ES register
   460 0000011B B402                            mov ah,0x02
   461 0000011D EB06                            jmp short disk_dir
   462                                  
   463                                  write_zero_dir:
   464 0000011F B000                            mov al,0
   465 00000121 F3AA                            rep stosb
   466                                  
   467                                          ;
   468                                          ; Write the directory to disk
   469                                          ;
   470                                  write_dir:
   471 00000123 B403                            mov ah,0x03
   472                                  disk_dir:
   473 00000125 BB0078                          mov bx,sector
   474 00000128 B90200                          mov cx,0x0002
   475                                          ;
   476                                          ; Do disk operation.
   477                                          ;
   478                                          ; Input:
   479                                          ;   AH = 0x02 read disk, 0x03 write disk
   480                                          ;   ES:BX = data source/target
   481                                          ;   CH = Track number
   482                                          ;   CL = Sector number
   483                                          ;
   484                                  disk:
   485 0000012B 50                              push ax
   486 0000012C 53                              push bx
   487 0000012D 51                              push cx
   488 0000012E 06                              push es
   489 0000012F B001                            mov al,0x01     ; AL = 1 sector
   490 00000131 31D2                            xor dx,dx       ; DH = Drive A. DL = Head 0.
   491 00000133 CD13                            int 0x13
   492 00000135 07                              pop es
   493 00000136 59                              pop cx
   494 00000137 5B                              pop bx
   495 00000138 58                              pop ax
   496 00000139 72F0                            jc disk         ; Retry
   497 0000013B C3                              ret
   498                                  
   499                                          ;
   500                                          ; Input line from keyboard
   501                                          ; Entry:
   502                                          ;   al = prompt character
   503                                          ; Output:
   504                                          ;   buffer 'line' contains line, finished with CR
   505                                          ;   SI points to 'line'.
   506                                          ;
   507                                  input_line:
   508 0000013C CD22                            int int_output_char ; Output prompt character
   509 0000013E BE8077                          mov si,line     ; Setup SI and DI to start of line buffer
   510 00000141 89F7                            mov di,si       ; Target for writing line
   511 00000143 3C08                    os1:    cmp al,0x08     ; Backspace?
   512 00000145 7502                            jne os2
   513 00000147 4F                              dec di          ; Undo the backspace write
   514 00000148 4F                              dec di          ; Erase a character
   515 00000149 CD21                    os2:    int int_input_key  ; Read keyboard
   516 0000014B 3C0D                            cmp al,0x0d     ; CR pressed?
   517 0000014D 7502                            jne os10
   518 0000014F B000                            mov al,0x00
   519 00000151 AA                      os10:   stosb           ; Save key in buffer
   520 00000152 75EF                            jne os1         ; No, wait another key
   521 00000154 C3                              ret             ; Yes, return
   522                                  
   523                                          ;
   524                                          ; Read a key into al
   525                                          ; Also outputs it to screen
   526                                          ;
   527                                  input_key:
   528 00000155 B400                            mov ah,0x00
   529 00000157 CD16                            int 0x16
   530                                          ;
   531                                          ; Screen output of character contained in al
   532                                          ; Expands 0x0d (CR) into 0x0a 0x0d (LF CR)
   533                                          ;
   534                                  output_char:
   535 00000159 3C0D                            cmp al,0x0d
   536 0000015B 7506                            jne os3
   537 0000015D B00A                            mov al,0x0a
   538 0000015F CD22                            int int_output_char
   539 00000161 B00D                            mov al,0x0d
   540                                  os3:
   541 00000163 B40E                            mov ah,0x0e     ; Output character to TTY
   542 00000165 BB0700                          mov bx,0x0007   ; Gray. Required for graphic modes
   543 00000168 CD10                            int 0x10        ; BIOS int 0x10 = Video
   544 0000016A CF                              iret
   545                                  
   546                                          ;
   547                                          ; Output string
   548                                          ;
   549                                          ; Entry:
   550                                          ;   SI = address
   551                                          ;
   552                                          ; Implementation:
   553                                          ;   It assumes that SI never points to a zero length string.
   554                                          ;
   555                                  output_string:
   556 0000016B AC                              lodsb                   ; Read character
   557 0000016C CD22                            int int_output_char     ; Output to screen
   558 0000016E 3C00                            cmp al,0x00             ; Is it 0x00 (terminator)?
   559 00000170 75F9                            jne output_string       ; No, the loop continues
   560 00000172 B00D                            mov al,0x0d
   561 00000174 CD22                            int int_output_char
   562 00000176 C3                              ret
   563                                  
   564                                          ;
   565                                          ; 'enter' command
   566                                          ;
   567                                  enter_command:
   568 00000177 BF007C                          mov di,boot             ; Point to boot sector
   569 0000017A 57                      os23:   push di
   570 0000017B B068                            mov al,'h'              ; Prompt character
   571 0000017D E8BCFF                          call input_line         ; Input line
   572 00000180 5F                              pop di
   573 00000181 803C00                          cmp byte [si],0         ; Empty line?
   574 00000184 7412                            je os20                 ; Yes, jump
   575 00000186 E81C00                  os19:   call xdigit             ; Get a hexadecimal digit
   576 00000189 73EF                            jnc os23
   577 0000018B B104                            mov cl,4
   578 0000018D D2E0                            shl al,cl
   579 0000018F 91                              xchg ax,cx
   580 00000190 E81200                          call xdigit             ; Get a hexadecimal digit
   581 00000193 08C8                            or al,cl
   582 00000195 AA                              stosb                   ; Write one byte
   583 00000196 EBEE                            jmp os19                ; Repeat loop to complete line
   584                                  os20:        
   585 00000198 B02A                            mov al,'*'              ; Prompt character
   586 0000019A E89FFF                          call input_line         ; Input line with filename
   587 0000019D 56                              push si
   588 0000019E 5B                              pop bx
   589 0000019F BF007C                          mov di,boot             ; Point to data entered
   590 000001A2 CD24                            int int_save_file       ; Save new file
   591 000001A4 C3                              ret
   592                                  
   593                                          ;
   594                                          ; Convert ASCII letter to hexadecimal digit
   595                                          ;
   596                                  xdigit:
   597 000001A5 AC                              lodsb
   598 000001A6 3C00                            cmp al,0x00             ; Zero character marks end of line
   599 000001A8 740D                            je os15
   600 000001AA 2C30                            sub al,0x30             ; Avoid spaces (anything below ASCII 0x30)
   601 000001AC 72F7                            jc xdigit
   602 000001AE 3C0A                            cmp al,0x0a
   603 000001B0 7205                            jc os15
   604 000001B2 2C07                            sub al,0x07
   605 000001B4 240F                            and al,0x0f
   606 000001B6 F9                              stc
   607                                  os15:
   608 000001B7 C3                              ret
   609                                  
   610                                          ;
   611                                          ; Our amazing presentation line
   612                                          ;
   613                                  intro:
   614 000001B8 626F6F744F5300                  db "bootOS",0
   615                                  
   616                                  error_message:
   617 000001BF 4F6F707300                      db "Oops",0
   618                                  
   619                                          ;
   620                                          ; Commands supported by bootOS
   621                                          ;
   622                                  commands:
   623 000001C4 03646972                        db 3,"dir"
   624 000001C8 [7600]                          dw dir_command
   625 000001CA 06666F726D6174                  db 6,"format"
   626 000001D1 [0A01]                          dw format_command
   627 000001D3 05656E746572                    db 5,"enter"
   628 000001D9 [7701]                          dw enter_command
   629 000001DB 0364656C                        db 3,"del"
   630 000001DF [6A00]                          dw del_command
   631 000001E1 03766572                        db 3,"ver"
   632 000001E5 [2300]                          dw ver_command
   633 000001E7 00                              db 0
   634                                  
   635                                  int_restart:            equ 0x20
   636                                  int_input_key:          equ 0x21
   637                                  int_output_char:        equ 0x22
   638                                  int_load_file:          equ 0x23
   639                                  int_save_file:          equ 0x24
   640                                  int_delete_file:        equ 0x25
   641                                  
   642                                  int_0x20:
   643 000001E8 [2B00]                          dw restart          ; int 0x20
   644 000001EA [5501]                          dw input_key        ; int 0x21
   645 000001EC [5901]                          dw output_char      ; int 0x22
   646 000001EE [9900]                          dw load_file        ; int 0x23
   647 000001F0 [AD00]                          dw save_file        ; int 0x24
   648 000001F2 [D100]                          dw delete_file      ; int 0x25
   649                                  
   650 000001F4 4F<rep Ah>                      times 510-($-$$) db 0x4f
   651 000001FE 55AA                            db 0x55,0xaa            ; Make it a bootable sector
